*openbrowser-github* Launch GitHub quickly from Vim

Author:
  tyru <tyru.exe@gmail.com>
Version: x.y.z
License: NEW BSD LICENSE {{{
  Copyright (c) 2013, tyru
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      * Neither the name of the tyru nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}}}

==============================================================================
CONTENTS						*openbrowser-github-contents*

Introduction		|openbrowser-github-introduction|
Requirements		|openbrowser-github-requirements|
Interface			|openbrowser-github-interface|
  Keymappings		|openbrowser-github-keymappings|
  Variables			|openbrowser-github-variables|
  Commands			|openbrowser-github-commands|
TODO				|openbrowser-github-todo|
Changelog			|openbrowser-github-changelog|


==============================================================================
INTRODUCTION						*openbrowser-github-introduction* {{{

Opens GitHub URL of current file, etc. from Vim.
Also supports GitHub Enterprise(|openbrowser-github-enterprise|).

See |openbrowser-github-commands| for the details of available commands.

}}}
==============================================================================
REQUIREMENTS						*openbrowser-github-requirements* {{{

You must install the following plugin/libraries.

* open-browser.vim
  https://github.com/tyru/open-browser.vim
* git command in your PATH

}}}
==============================================================================
GITHUB ENTERPRISE SETTING			*openbrowser-github-enterprise* {{{

1. Get entire URL from "hub" command.

If you installed "hub" command, |openbrowser-github| will execute the
following command: >
	hub browse -u -- {path}
<	And will open a returned (output) URL.

2. Get each part from "git config --get hub.xxx" output

* hub.protocol (TODO)
* hub.host

Like the hub command(https://github.com/github/hub),
by setting above keys / values in gitconfig,
you can open a GitHub Enterprise repository page.

For example, you can set 'hub.host' by executing the command below.
Make sure you execute it in the git repository.
>
	$ git config --local hub.host my.git.org
<
}}}
==============================================================================
INTERFACE				*openbrowser-github-interface* {{{
------------------------------------------------------------------------------
KEYMAPPINGS					*openbrowser-github-keymappings* {{{


Default keymappings
--------------------


}}}
------------------------------------------------------------------------------
VARIABLES					*openbrowser-github-variables* {{{

					*g:openbrowser_github_always_used_branch*
g:openbrowser_github_always_used_branch
							(Default: "")
	If this variable is not empty string,
	|openbrowser-github| always opens current file
	in the branch.

					*g:openbrowser_github_always_use_commit_hash*
g:openbrowser_github_always_use_commit_hash
							(Default: 1)
	If this variable is non-zero value,
	|openbrowser-github| always opens a URL
	with a current commit hash.
	ex) https://github.com/tyru/open-browser.vim/blob/9f1de0e38a1e378061a8f10df6ed8e22c48aa9ae/autoload/openbrowser.vim

	If this variable is zero value,
	|openbrowser-github| opens a URL
	with a current commit hash
	if current working tree is detached state.
	Otherwise, |openbrowser-github| opens a URL
	with a current branch's latest file.
	ex) https://github.com/tyru/open-browser.vim/blob/master/autoload/openbrowser.vim

					*g:openbrowser_github_url_exists_check*
g:openbrowser_github_url_exists_check
							(Default: "yes")
	This determines the behavior when you
	push to the non-existent/unauthorized repository.
	If this variable is "yes", shows prompt to ask you
	if you really open URL.
	If this variable is "ignore", any prompts and warning
	messages aren't showed.

}}}
------------------------------------------------------------------------------
COMMANDS					*openbrowser-github-commands* {{{

:OpenGithubFile					*:OpenGithubFile*
---------------

Opens a specific file in github.com repository(it also opens in the current branch by default).
>
	" Opens current files URL in github.com
	" ex) https://{hostname}/{user}/{repos}/blob/{hash or branch}/{relpath}
	:OpenGithubFile

	" Opens current files highlighted place in github.com
	" ex) https://{hostname}/{user}/{repos}/blob/{hash or branch}/{relpath}#{lnum}
	:'<,'>OpenGithubFile

	" Opens a specific file in github.com
	" ex) https://{hostname}/{user}/{repos}/blob/{hash or branch}/PATH/TO/FILE#{lnum}
	:OpenGithubFile PATH/TO/FILE
<
	Those URLs are influenced by some global variables.
	See:
	* |g:openbrowser_github_always_used_branch|
	* |g:openbrowser_github_always_use_commit_hash|


							*:OpenGithubIssue*
:OpenGithubIssue
:OpenGithubIssue {number} [{repos}]
:OpenGithubIssue {repos}
----------------

Opens a specific Issue.
>
	" Opens current repositories Issue #1
	" ex) https://{hostname}/{user}/{repos}/issues/1
	:OpenGithubIssue 1

	" Opens a specific repositories Issue #1
	" ex) https://{hostname}/tyru/open-browser.vim/issues/1
	:OpenGithubIssue 1 tyru/open-browser.vim

	" Opens current repositories Issue List
	" ex) https://{hostname}/{user}/{repos}/issues
	:OpenGithubIssue

	" Opens a specific repositories Issue list
	" ex) https://{hostname}/tyru/open-browser.vim/issues
	:OpenGithubIssue tyru/open-browser.vim
<

							*:OpenGithubPullReq*
:OpenGithubPullReq
:OpenGithubPullReq {number} [{repos}]
:OpenGithubPullReq {repos}
------------------

Opens '/pulls' page when it has no argument.
Otherwise, it does entirely the same thing as |:OpenGithubIssue|
since GitHub redirects '/issues/1' to '/pull/1'
if #1 is a Pull Request.


							*:OpenGithubProject*
:OpenGithubProject [{repos}]

Opens a project page.
>
	" Opens current opening file's repository.
	" ex) https://{hostname}/{user}/{name}
	:OpenGithubProject
>
	" Opens current opening file's repository.
	" ex) https://{hostname}/tyru/open-browser.vim
	:OpenGithubProject tyru/open-browser.vim

}}}
}}}
==============================================================================
TODO						*openbrowser-github-todo* {{{

Any requests? ;)

https://github.com/tyru/github.vim/issues

}}}
==============================================================================
CHANGELOG						*openbrowser-github-changelog* {{{

0.0.0:
- Initial upload

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=4:ft=help:norl:noet:fdm=marker:fen
